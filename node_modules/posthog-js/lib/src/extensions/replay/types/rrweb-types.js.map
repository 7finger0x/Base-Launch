{"version":3,"file":"rrweb-types.js","sourceRoot":"","sources":["../../../../../src/extensions/replay/types/rrweb-types.ts"],"names":[],"mappings":";AAAA,6FAA6F;AAC7F,oEAAoE;AACpE,EAAE;AACF,oFAAoF;AACpF,0CAA0C;AAC1C,EAAE;AACF,oBAAoB;AACpB,oFAAoF;AACpF,wFAAwF;;;AAgDxF,IAAY,QAOX;AAPD,WAAY,QAAQ;IAChB,+CAAY,CAAA;IACZ,uDAAgB,CAAA;IAChB,6CAAW,CAAA;IACX,uCAAQ,CAAA;IACR,yCAAS,CAAA;IACT,6CAAW,CAAA;AACf,CAAC,EAPW,QAAQ,wBAAR,QAAQ,QAOnB;AAiED,IAAY,SAQX;AARD,WAAY,SAAS;IACjB,iEAAoB,CAAA;IACpB,yCAAQ,CAAA;IACR,yDAAgB,CAAA;IAChB,uEAAuB,CAAA;IACvB,yCAAQ,CAAA;IACR,6CAAU,CAAA;IACV,6CAAU,CAAA;AACd,CAAC,EARW,SAAS,yBAAT,SAAS,QAQpB;AAED,IAAY,iBAkBX;AAlBD,WAAY,iBAAiB;IACzB,iEAAY,CAAA;IACZ,mEAAa,CAAA;IACb,iFAAoB,CAAA;IACpB,6DAAU,CAAA;IACV,6EAAkB,CAAA;IAClB,2DAAS,CAAA;IACT,mEAAa,CAAA;IACb,iFAAoB,CAAA;IACpB,6EAAkB,CAAA;IAClB,6EAAkB,CAAA;IAClB,0DAAS,CAAA;IACT,wDAAQ,CAAA;IACR,0DAAS,CAAA;IACT,kFAAqB,CAAA;IACrB,oEAAc,CAAA;IACd,oFAAsB,CAAA;IACtB,4EAAkB,CAAA;AACtB,CAAC,EAlBW,iBAAiB,iCAAjB,iBAAiB,QAkB5B;AAkGD,IAAY,iBAYX;AAZD,WAAY,iBAAiB;IACzB,+DAAW,CAAA;IACX,mEAAa,CAAA;IACb,2DAAS,CAAA;IACT,uEAAe,CAAA;IACf,iEAAY,CAAA;IACZ,2DAAS,CAAA;IACT,yDAAQ,CAAA;IACR,qEAAc,CAAA;IACd,qFAAsB,CAAA;IACtB,iEAAY,CAAA;IACZ,wEAAgB,CAAA;AACpB,CAAC,EAZW,iBAAiB,iCAAjB,iBAAiB,QAY5B;AAED,IAAY,YAIX;AAJD,WAAY,YAAY;IACpB,iDAAS,CAAA;IACT,6CAAO,CAAA;IACP,iDAAS,CAAA;AACb,CAAC,EAJW,YAAY,4BAAZ,YAAY,QAIvB;AAiDD,IAAY,iBAMX;AAND,WAAY,iBAAiB;IACzB,yDAAQ,CAAA;IACR,2DAAS,CAAA;IACT,6DAAU,CAAA;IACV,yEAAgB,CAAA;IAChB,qEAAc,CAAA;AAClB,CAAC,EANW,iBAAiB,iCAAjB,iBAAiB,QAM5B;AAsCD,IAAY,aAIX;AAJD,WAAY,aAAa;IACrB,6CAAQ,CAAA;IACR,mDAAS,CAAA;IACT,qDAAU,CAAA;AACd,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB","sourcesContent":["// Type definitions copied from @rrweb/types@2.0.0-alpha.17 and rrweb-snapshot@2.0.0-alpha.17\n// Both packages are MIT licensed: https://github.com/rrweb-io/rrweb\n//\n// These types are copied here to avoid requiring users to install peer dependencies\n// solely for TypeScript type information.\n//\n// Original sources:\n// - @rrweb/types: https://github.com/rrweb-io/rrweb/tree/main/packages/@rrweb/types\n// - rrweb-snapshot: https://github.com/rrweb-io/rrweb/tree/main/packages/rrweb-snapshot\n\n// ===== Types from rrweb-snapshot =====\n// These are needed by @rrweb/types\n\nexport type DataURLOptions = Partial<{\n    type: string\n    quality: number\n}>\n\nexport interface INode extends Node {\n    __sn: serializedNodeWithId\n}\n\nexport interface IMirror<TNode> {\n    getId(n: TNode | undefined | null): number\n    getNode(id: number): TNode | null\n    getIds(): number[]\n    getMeta(n: TNode): serializedNodeWithId | null\n    removeNodeFromMap(n: TNode): void\n    has(id: number): boolean\n    hasNode(node: TNode): boolean\n    add(n: TNode, meta: serializedNodeWithId): void\n    replace(id: number, n: TNode): void\n    reset(): void\n}\n\nexport declare class Mirror implements IMirror<Node> {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private idNodeMap\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private nodeMetaMap\n    getId(n: Node | undefined | null): number\n    getNode(id: number): Node | null\n    getIds(): number[]\n    getMeta(n: Node): serializedNodeWithId | null\n    removeNodeFromMap(n: Node): void\n    has(id: number): boolean\n    hasNode(node: Node): boolean\n    add(n: Node, meta: serializedNodeWithId): void\n    replace(id: number, n: Node): void\n    reset(): void\n}\n\nexport type attributes = {\n    [key: string]: string | number | true | null\n}\n\nexport enum NodeType {\n    Document = 0,\n    DocumentType = 1,\n    Element = 2,\n    Text = 3,\n    CDATA = 4,\n    Comment = 5,\n}\n\nexport type documentNode = {\n    type: NodeType.Document\n    childNodes: serializedNodeWithId[]\n    compatMode?: string\n}\n\nexport type documentTypeNode = {\n    type: NodeType.DocumentType\n    name: string\n    publicId: string\n    systemId: string\n}\n\nexport type elementNode = {\n    type: NodeType.Element\n    tagName: string\n    attributes: attributes\n    childNodes: serializedNodeWithId[]\n    isSVG?: true\n    needBlock?: boolean\n    isCustom?: true\n}\n\nexport type textNode = {\n    type: NodeType.Text\n    textContent: string\n    isStyle?: true\n}\n\nexport type cdataNode = {\n    type: NodeType.CDATA\n    textContent: ''\n}\n\nexport type commentNode = {\n    type: NodeType.Comment\n    textContent: string\n}\n\nexport type serializedNode = (documentNode | documentTypeNode | elementNode | textNode | cdataNode | commentNode) & {\n    rootId?: number\n    isShadowHost?: boolean\n    isShadow?: boolean\n}\n\nexport type serializedNodeWithId = serializedNode & {\n    id: number\n}\n\n// ===== Types from @rrweb/types =====\n\nexport type blockClass = string | RegExp\n\nexport type maskTextClass = string | RegExp\n\nexport type IWindow = Window & typeof globalThis\n\nexport type listenerHandler = () => void\n\nexport type KeepIframeSrcFn = (src: string) => boolean\n\nexport type PackFn = (event: eventWithTime) => string\n\nexport enum EventType {\n    DomContentLoaded = 0,\n    Load = 1,\n    FullSnapshot = 2,\n    IncrementalSnapshot = 3,\n    Meta = 4,\n    Custom = 5,\n    Plugin = 6,\n}\n\nexport enum IncrementalSource {\n    Mutation = 0,\n    MouseMove = 1,\n    MouseInteraction = 2,\n    Scroll = 3,\n    ViewportResize = 4,\n    Input = 5,\n    TouchMove = 6,\n    MediaInteraction = 7,\n    StyleSheetRule = 8,\n    CanvasMutation = 9,\n    Font = 10,\n    Log = 11,\n    Drag = 12,\n    StyleDeclaration = 13,\n    Selection = 14,\n    AdoptedStyleSheet = 15,\n    CustomElement = 16,\n}\n\nexport type domContentLoadedEvent = {\n    type: EventType.DomContentLoaded\n    data: unknown\n}\n\nexport type loadedEvent = {\n    type: EventType.Load\n    data: unknown\n}\n\nexport type fullSnapshotEvent = {\n    type: EventType.FullSnapshot\n    data: {\n        node: serializedNodeWithId\n        initialOffset: {\n            top: number\n            left: number\n        }\n    }\n}\n\nexport type metaEvent = {\n    type: EventType.Meta\n    data: {\n        href: string\n        width: number\n        height: number\n    }\n}\n\nexport type customEvent<T = unknown> = {\n    type: EventType.Custom\n    data: {\n        tag: string\n        payload: T\n    }\n}\n\nexport type pluginEvent<T = unknown> = {\n    type: EventType.Plugin\n    data: {\n        plugin: string\n        payload: T\n    }\n}\n\nexport type styleOMValue = {\n    [key: string]: styleValueWithPriority | string | false\n}\n\nexport type styleValueWithPriority = [string, string]\n\nexport type textMutation = {\n    id: number\n    value: string | null\n}\n\nexport type attributeMutation = {\n    id: number\n    attributes: {\n        [key: string]: string | styleOMValue | null\n    }\n}\n\nexport type removedNodeMutation = {\n    parentId: number\n    id: number\n    isShadow?: boolean\n}\n\nexport type addedNodeMutation = {\n    parentId: number\n    previousId?: number | null\n    nextId: number | null\n    node: serializedNodeWithId\n}\n\nexport type mutationCallbackParam = {\n    texts: textMutation[]\n    attributes: attributeMutation[]\n    removes: removedNodeMutation[]\n    adds: addedNodeMutation[]\n    isAttachIframe?: true\n}\n\nexport type mutationData = {\n    source: IncrementalSource.Mutation\n} & mutationCallbackParam\n\nexport type mousePosition = {\n    x: number\n    y: number\n    id: number\n    timeOffset: number\n}\n\nexport enum MouseInteractions {\n    MouseUp = 0,\n    MouseDown = 1,\n    Click = 2,\n    ContextMenu = 3,\n    DblClick = 4,\n    Focus = 5,\n    Blur = 6,\n    TouchStart = 7,\n    TouchMove_Departed = 8,\n    TouchEnd = 9,\n    TouchCancel = 10,\n}\n\nexport enum PointerTypes {\n    Mouse = 0,\n    Pen = 1,\n    Touch = 2,\n}\n\ntype mouseInteractionParam = {\n    type: MouseInteractions\n    id: number\n    x?: number\n    y?: number\n    pointerType?: PointerTypes\n}\n\nexport type mouseInteractionData = {\n    source: IncrementalSource.MouseInteraction\n} & mouseInteractionParam\n\nexport type mousemoveData = {\n    source: IncrementalSource.MouseMove | IncrementalSource.TouchMove | IncrementalSource.Drag\n    positions: mousePosition[]\n}\n\nexport type scrollPosition = {\n    id: number\n    x: number\n    y: number\n}\n\nexport type scrollData = {\n    source: IncrementalSource.Scroll\n} & scrollPosition\n\nexport type viewportResizeDimension = {\n    width: number\n    height: number\n}\n\nexport type viewportResizeData = {\n    source: IncrementalSource.ViewportResize\n} & viewportResizeDimension\n\nexport type inputValue = {\n    text: string\n    isChecked: boolean\n    userTriggered?: boolean\n}\n\nexport type inputData = {\n    source: IncrementalSource.Input\n    id: number\n} & inputValue\n\nexport enum MediaInteractions {\n    Play = 0,\n    Pause = 1,\n    Seeked = 2,\n    VolumeChange = 3,\n    RateChange = 4,\n}\n\nexport type mediaInteractionParam = {\n    type: MediaInteractions\n    id: number\n    currentTime?: number\n    volume?: number\n    muted?: boolean\n    loop?: boolean\n    playbackRate?: number\n}\n\nexport type mediaInteractionData = {\n    source: IncrementalSource.MediaInteraction\n} & mediaInteractionParam\n\nexport type styleSheetAddRule = {\n    rule: string\n    index?: number | number[]\n}\n\nexport type styleSheetDeleteRule = {\n    index: number | number[]\n}\n\nexport type styleSheetRuleParam = {\n    id?: number\n    styleId?: number\n    removes?: styleSheetDeleteRule[]\n    adds?: styleSheetAddRule[]\n    replace?: string\n    replaceSync?: string\n}\n\nexport type styleSheetRuleData = {\n    source: IncrementalSource.StyleSheetRule\n} & styleSheetRuleParam\n\nexport enum CanvasContext {\n    '2D' = 0,\n    WebGL = 1,\n    WebGL2 = 2,\n}\n\nexport type canvasMutationCommand = {\n    property: string\n    args: Array<unknown>\n    setter?: true\n}\n\nexport type canvasMutationParam =\n    | {\n          id: number\n          type: CanvasContext\n          commands: canvasMutationCommand[]\n      }\n    | ({\n          id: number\n          type: CanvasContext\n      } & canvasMutationCommand)\n\nexport type canvasMutationData = {\n    source: IncrementalSource.CanvasMutation\n} & canvasMutationParam\n\nexport type fontParam = {\n    family: string\n    fontSource: string\n    buffer: boolean\n    descriptors?: FontFaceDescriptors\n}\n\nexport type fontData = {\n    source: IncrementalSource.Font\n} & fontParam\n\nexport type SelectionRange = {\n    start: number\n    startOffset: number\n    end: number\n    endOffset: number\n}\n\nexport type selectionParam = {\n    ranges: Array<SelectionRange>\n}\n\nexport type selectionData = {\n    source: IncrementalSource.Selection\n} & selectionParam\n\nexport type styleDeclarationParam = {\n    id?: number\n    styleId?: number\n    index: number[]\n    set?: {\n        property: string\n        value: string | null\n        priority: string | undefined\n    }\n    remove?: {\n        property: string\n    }\n}\n\nexport type styleDeclarationData = {\n    source: IncrementalSource.StyleDeclaration\n} & styleDeclarationParam\n\nexport type adoptedStyleSheetParam = {\n    id: number\n    styles?: {\n        styleId: number\n        rules: styleSheetAddRule[]\n    }[]\n    styleIds: number[]\n}\n\nexport type adoptedStyleSheetData = {\n    source: IncrementalSource.AdoptedStyleSheet\n} & adoptedStyleSheetParam\n\nexport type customElementParam = {\n    define?: {\n        name: string\n    }\n}\n\nexport type customElementData = {\n    source: IncrementalSource.CustomElement\n} & customElementParam\n\nexport type incrementalData =\n    | mutationData\n    | mousemoveData\n    | mouseInteractionData\n    | scrollData\n    | viewportResizeData\n    | inputData\n    | mediaInteractionData\n    | styleSheetRuleData\n    | canvasMutationData\n    | fontData\n    | selectionData\n    | styleDeclarationData\n    | adoptedStyleSheetData\n    | customElementData\n\nexport type incrementalSnapshotEvent = {\n    type: EventType.IncrementalSnapshot\n    data: incrementalData\n}\n\nexport type eventWithoutTime =\n    | domContentLoadedEvent\n    | loadedEvent\n    | fullSnapshotEvent\n    | incrementalSnapshotEvent\n    | metaEvent\n    | customEvent\n    | pluginEvent\n\nexport type eventWithTime = eventWithoutTime & {\n    timestamp: number\n    delay?: number\n}\n\nexport type mutationCallBack = (m: mutationCallbackParam) => void\n\nexport type mousemoveCallBack = (\n    p: mousePosition[],\n    source: IncrementalSource.MouseMove | IncrementalSource.TouchMove | IncrementalSource.Drag\n) => void\n\nexport type mouseInteractionCallBack = (d: mouseInteractionParam) => void\n\nexport type scrollCallback = (p: scrollPosition) => void\n\nexport type viewportResizeCallback = (d: viewportResizeDimension) => void\n\nexport type inputCallback = (v: inputValue & { id: number }) => void\n\nexport type mediaInteractionCallback = (p: mediaInteractionParam) => void\n\nexport type styleSheetRuleCallback = (s: styleSheetRuleParam) => void\n\nexport type styleDeclarationCallback = (s: styleDeclarationParam) => void\n\nexport type canvasMutationCallback = (p: canvasMutationParam) => void\n\nexport type fontCallback = (p: fontParam) => void\n\nexport type selectionCallback = (p: selectionParam) => void\n\nexport type customElementCallback = (c: customElementParam) => void\n\nexport type adoptedStyleSheetCallback = (a: adoptedStyleSheetParam) => void\n\nexport type hooksParam = {\n    mutation?: mutationCallBack\n    mousemove?: mousemoveCallBack\n    mouseInteraction?: mouseInteractionCallBack\n    scroll?: scrollCallback\n    viewportResize?: viewportResizeCallback\n    input?: inputCallback\n    mediaInteaction?: mediaInteractionCallback\n    styleSheetRule?: styleSheetRuleCallback\n    styleDeclaration?: styleDeclarationCallback\n    canvasMutation?: canvasMutationCallback\n    font?: fontCallback\n    selection?: selectionCallback\n    customElement?: customElementCallback\n}\n\nexport type SamplingStrategy = Partial<{\n    mousemove: boolean | number\n    mousemoveCallback: number\n    mouseInteraction: boolean | Record<string, boolean | undefined>\n    scroll: number\n    media: number\n    input: 'all' | 'last'\n    canvas: 'all' | number\n}>\n\nexport interface ICrossOriginIframeMirror {\n    getId(\n        iframe: HTMLIFrameElement,\n        remoteId: number,\n        parentToRemoteMap?: Map<number, number>,\n        remoteToParentMap?: Map<number, number>\n    ): number\n    getIds(iframe: HTMLIFrameElement, remoteId: number[]): number[]\n    getRemoteId(iframe: HTMLIFrameElement, parentId: number, map?: Map<number, number>): number\n    getRemoteIds(iframe: HTMLIFrameElement, parentId: number[]): number[]\n    reset(iframe?: HTMLIFrameElement): void\n}\n\nexport type RecordPlugin<TOptions = unknown> = {\n    name: string\n    observer?: (cb: (...args: Array<unknown>) => void, win: IWindow, options: TOptions) => listenerHandler\n    eventProcessor?: <TExtend>(event: eventWithTime) => eventWithTime & TExtend\n    getMirror?: (mirrors: {\n        nodeMirror: Mirror\n        crossOriginIframeMirror: ICrossOriginIframeMirror\n        crossOriginIframeStyleMirror: ICrossOriginIframeMirror\n    }) => void\n    options: TOptions\n}\n"]}